<?php
    // Display all errors on page
    ini_set('error_reporting', E_ALL);

    // Set DB configs
    define("MySQL_USER", getenv('C9_USER'));
    define("MySQL_PASSWORD", "");
    define("MySQL_DB_NAME", "blog");
    define("MySQL_HOST", getenv('IP'));
   
    // DB Class used to open and set current db connection
    // Use by all classes that manage db tables
    class DB {
        protected $dbh;
        
        function __construct() {
            try {
                // Set connection on class property
                $this->dbh = new PDO('mysql:host='.MySQL_HOST.';dbname=' . MySQL_DB_NAME, MySQL_USER, MySQL_PASSWORD);     
            } catch (PDOException $e) {
                print "Error!: Cannot connect to db! Check connection " . $e->getMessage() . "<br/>";
                die();
            }    
        }
        
    }
  
    // Articles class manages all operations on article table
    // Extends DB to open and have access to the connection
    class Articles extends DB {
        
        // Get list of all published articles
        function getArticles() {
            $sql = 'select * from articles where published = 1';
            $sth = $this->dbh->prepare($sql);
            $sth->execute();
            
            return $sth->fetchAll(PDO::FETCH_ASSOC);    
        }
        
        // Get article by id
        function getArticle($id) {
            $params = [':id' => $id]; 
            $sql = 'select * from articles where id = :id and published = 1';
            $sth = $this->dbh->prepare($sql);
            $sth->execute($params);
            
            return $sth->fetch(PDO::FETCH_ASSOC);      
        }
        
        // Delete article by id
        function deleteArticle($id) {
            $params = [':id' => $id]; 
            $sql = 'UPDATE articles SET published = 0 WHERE id = :id';
            $sth = $this->dbh->prepare($sql);
            $sth->execute($params);
            return $sth->rowCount(); 
        }
        
        // Add new article
        function addArticle($article) {
            $params = [':title' => $article["title"], ':content' => $article["content"]]; 
            $sql = 'INSERT INTO articles(title, content) VALUES(:title, :content)';
            $sth = $this->dbh->prepare($sql);
            $result = $sth->execute($params);
            return $sth->rowCount();
        }
        
        // @tema Implement update article method
        function editArticle($article) {
            $id = $_GET["id"];
            $params = [':title' => $article["title"], ':content' => $article["content"]]; 
            $sql = 'UPDATE articles SET title = :title , content => :content WHERE id = '.$id;
            $sth = $this->dbh->prepare($sql);
            $sth->execute($params);
            return $sth->rowCount(); 
        }
     }  
     
    // Instantiate articles model so we can use the methods
    $articlesClass = new Articles();
    $article = '';
    
    
    // Capture delete request based on delete param and id and delete it form db
    if (isset($_GET["delete"]) && !empty($_GET["id"])) {
        $result = $articlesClass->deleteArticle($_GET["id"]);  
        if ($result === 1) {
            echo "Article Deleted";
        }
    }
    
    // Capture edit request based on edit param and id and get article from db
    if (isset($_GET["edit"]) && !empty($_GET["id"])) {
        $article = $articlesClass->getArticle($_GET["id"]);         
    }
    
    // Capture add request
    // @tema - improve capture condition so this is executed only on add

    if (!empty($_POST["title"])) {
        $result = $articlesClass->addArticle($_POST);   
    }    
    
    // Get articles list
    $articles = $articlesClass->getArticles();
    if ($articles === false) {
        echo "Empty List";
    }
    else {
        echo "<pre>";
        //var_dump($articles);   
    }
?>

<!-- @tema - add a serach filter for articles title and make it work in the same page :D -->
<table border="1">
    <?php for($i=0; $i < count($articles); $i++) { ?>
        <tr>
            <td><?php echo $articles[$i]["title"];?></td>
            <td><?php echo $articles[$i]["content"];?></td>
            <td><a href="index.php?delete&id=<?php echo $articles[$i]["id"];?>">Delete</a></td>
            <td><a href="index.php?edit&id=<?php echo $articles[$i]["id"];?>">Edit</a></td>
        </tr>
    <?php }?>
</table>

<label>Add article</label>
<form method="POST" action="index.php?update">
    <input type="hidden" name="id" value="<?php echo isset($article["id"]) ? $article["id"] : ""; ?>"/> 
    <input type="text" name="title" placeholder="Title" value="<?php echo isset($article["title"]) ? $article["title"] : ""; ?>" />
    <textarea name="content" placeholder="Content"><?php echo isset($article["content"]) ? $article["content"] : ""; ?> </textarea>
    
    <input type="submit" value="Submit"/>
</form>






<label>Add article</label>
<label>Add article</label>



        if(i===0){        
        $(".carousel-indicators").append("<li id="+carouselItems[i].id+" class='active'></li>");
        }else{
        $(".carousel-indicators").append("<li id="+carouselItems[i].id+" ></li>");    
            
        $(".carousel-inner").append(currentCarouselItem);
    }